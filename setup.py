"""
Script de configuration pour l'application Chat LLM.
G√©n√®re le fichier .env et pr√©pare l'environnement de d√©veloppement.
"""
import os
import sys
from pathlib import Path
from typing import Dict

def create_env_file(env_path: Path) -> None:
    """
    Cr√©e le fichier .env avec les variables d'environnement par d√©faut.
    
    Args:
        env_path: Chemin vers le fichier .env
    """
    env_content = """# Configuration Chat LLM
# Cl√©s API (√† remplir)
MISTRAL_API_KEY=
GEMINI_API_KEY=
DEEPSEEK_API_KEY=

# Configuration des mod√®les locaux
LM_STUDIO_URL=http://localhost:1234
OLLAMA_URL=http://localhost:11434

# Configuration de l'application
LOG_LEVEL=INFO
SAVE_HISTORY=true
MAX_HISTORY=100
AUDIO_ENABLED=true

# Configuration du mod√®le par d√©faut
DEFAULT_MODEL=mistral
DEFAULT_TEMPERATURE=0.7
DEFAULT_MAX_TOKENS=1000
"""
    
    env_path.write_text(env_content)
    print(f"\033[92m‚úì\033[0m Fichier .env cr√©√©: {env_path}")

def check_python_version() -> None:
    """V√©rifie que la version de Python est compatible."""
    if sys.version_info < (3, 8):
        print("\033[91m‚úó\033[0m Python 3.8 ou sup√©rieur requis")
        sys.exit(1)
    print(f"\033[92m‚úì\033[0m Python {sys.version_info.major}.{sys.version_info.minor}")

def create_directories() -> None:
    """Cr√©e les r√©pertoires n√©cessaires s'ils n'existent pas."""
    dirs = [
        "src/api",
        "src/audio",
        "src/config",
        "src/ui/components",
        "src/ui/pages",
        "tests",
        "logs"
    ]
    
    for dir_path in dirs:
        path = Path(dir_path)
        if not path.exists():
            path.mkdir(parents=True)
            print(f"\033[92m‚úì\033[0m R√©pertoire cr√©√©: {path}")

def main() -> None:
    """Point d'entr√©e du script de configuration."""
    print("\nüîß Configuration de Chat LLM\n")

    # V√©rification de Python
    print("V√©rification de l'environnement...")
    check_python_version()

    # Cr√©ation des r√©pertoires
    print("\nCr√©ation des r√©pertoires...")
    create_directories()

    # Cr√©ation du fichier .env s'il n'existe pas
    env_path = Path(".env")
    if not env_path.exists():
        print("\nCr√©ation du fichier .env...")
        create_env_file(env_path)
    else:
        print("\n\033[93m!\033[0m Le fichier .env existe d√©j√†")

    print("\n‚ú® Configuration termin√©e!\n")
    print("√âtapes suivantes:")
    print("1. Remplir les cl√©s API dans le fichier .env")
    print("2. Installer les d√©pendances: pip install -r requirements.txt")
    print("3. Lancer l'application: python src/main.py\n")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nConfiguration interrompue")
        sys.exit(1)
    except Exception as e:
        print(f"\n\033[91m‚úó\033[0m Erreur: {e}")
        sys.exit(1)